base_image_common: &base_image_common
  filters:
    tags:
      only: /.*base-image.*/
    branches:
      ignore: /.*/

deploy_image_common: &deploy_image_common
  filters:
    tags:
      ignore: /.*base-image.*/
    branches:
      ignore: /.*/

version: 2.1

jobs:
  build_and_push_base_image:
    parameters:
      dockerfile:
        type: string
      tag:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker registry login
          command: echo "$BASE_IMAGE_PASSWORD" | docker login --username "$BASE_IMAGE_USERNAME" --password-stdin $BASE_IMAGE_SERVER
      - run:
          name: Build base image
          command: |
            cd docker/btcpool/base-image
            docker build --rm -t $BASE_IMAGE_SERVER/$BASE_IMAGE_REPO:<<parameters.tag>> -f <<parameters.dockerfile>> .
      - run:
          name: Push base image
          command: docker push $BASE_IMAGE_SERVER/$BASE_IMAGE_REPO:<<parameters.tag>>
  check_clang_format:
    docker:
      - image: $BASE_IMAGE_SERVER/$BASE_IMAGE_REPO:lint
        auth:
          username: $BASE_IMAGE_USERNAME
          password: $BASE_IMAGE_PASSWORD
    steps:
      - checkout
      - run:
          name: Run clang-format
          command: ./run-clang-format.sh && git diff --exit-code
  build_and_run_unit_tests:
    parameters:
      base:
        type: string
    docker:
      - image: $BASE_IMAGE_SERVER/$BASE_IMAGE_REPO:<<parameters.base>>
        auth:
          username: $BASE_IMAGE_USERNAME
          password: $BASE_IMAGE_PASSWORD
    steps:
      - checkout
      - run:
          name: Run CMake
          command: |
            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=Debug -DCHAIN_SRC_ROOT=/work/blockchain -DCHAIN_TYPE=$CHAIN_TYPE -DJOBS=2  ..
      - run:
          name: Build btcpool
          command: cd build && make -j2
      - run:
          name: Run unit tests
          command: cd build && make test
  build_and_push_deploy_image:
    docker:
      - image: circleci/golang
    parameters:
      base:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker registry login (base image)
          command: echo "$BASE_IMAGE_PASSWORD" | docker login --username "$BASE_IMAGE_USERNAME" --password-stdin $BASE_IMAGE_SERVER
      - run:
          name: Build deploy image
          command: |
            docker build --rm -f docker/btcpool/deploy/Dockerfile -t ${CIRCLE_TAG}_<<parameters.base>> \
              --build-arg BASE_IMAGE=$BASE_IMAGE_SERVER/$BASE_IMAGE_REPO:<<parameters.base>> \
              --build-arg BUILD_JOBS=2 .
      - run:
          name: Docker registry login (deploy image)
          command: |
            for DEPLOY_IMAGE_SERVER in $DEPLOY_IMAGE_SERVERS; do
              echo "$DEPLOY_IMAGE_PASSWORD" | docker login --username "$DEPLOY_IMAGE_USERNAME" --password-stdin $DEPLOY_IMAGE_SERVER
            done
      - run:
          name: Tag deploy image
          command: |
            for DEPLOY_IMAGE_SERVER in $DEPLOY_IMAGE_SERVERS; do
              docker tag ${CIRCLE_TAG}_<<parameters.base>> $DEPLOY_IMAGE_SERVER/$DEPLOY_IMAGE_REPO:${CIRCLE_TAG}_<<parameters.base>>
            done
      - run:
          name: Push deploy image
          command: |
            for DEPLOY_IMAGE_SERVER in $DEPLOY_IMAGE_SERVERS; do
              docker push $DEPLOY_IMAGE_SERVER/$DEPLOY_IMAGE_REPO:${CIRCLE_TAG}_<<parameters.base>>
            done

workflows:
  version: 2
  build_and_push_base_images:
    jobs:
      - build_and_push_base_image:
          <<: *base_image_common
          dockerfile: Dockerfile.lint
          tag: lint
      - build_and_push_base_image:
          <<: *base_image_common
          dockerfile: Dockerfile.bch
          tag: bch-0.18.5
      - build_and_push_base_image:
          <<: *base_image_common
          dockerfile: Dockerfile.btc
          tag: btc-0.16.3
      - build_and_push_base_image:
          <<: *base_image_common
          dockerfile: Dockerfile.sbtc
          tag: sbtc-0.16.2
      - build_and_push_base_image:
          <<: *base_image_common
          dockerfile: Dockerfile.ubtc
          tag: ubtc-2.5.0.1
      - build_and_push_base_image:
          <<: *base_image_common
          dockerfile: Dockerfile.ltc
          tag: ltc-0.16.3
      - build_and_push_base_image:
          <<: *base_image_common
          dockerfile: Dockerfile.zec
          tag: zec-2.0.4
  build_and_run_unit_tests_all_chains:
    jobs:
      - check_clang_format
      - build_and_run_unit_tests:
          base: bch-0.18.5
          requires:
            - check_clang_format
      - build_and_run_unit_tests:
          base: btc-0.16.3
          requires:
            - check_clang_format
      - build_and_run_unit_tests:
          base: sbtc-0.16.2
          requires:
            - check_clang_format
      - build_and_run_unit_tests:
          base: ubtc-2.5.0.1
          requires:
            - check_clang_format
      - build_and_run_unit_tests:
          base: ltc-0.16.3
          requires:
            - check_clang_format
      - build_and_run_unit_tests:
          base: zec-2.0.4
          requires:
            - check_clang_format
  build_and_push_deploy_images:
    jobs:
      - build_and_push_deploy_image:
          <<: *deploy_image_common
          base: bch-0.18.5
      - build_and_push_deploy_image:
          <<: *deploy_image_common
          base: btc-0.16.3
      - build_and_push_deploy_image:
          <<: *deploy_image_common
          base: sbtc-0.16.2
      - build_and_push_deploy_image:
          <<: *deploy_image_common
          base: ubtc-2.5.0.1
      - build_and_push_deploy_image:
          <<: *deploy_image_common
          base: ltc-0.16.3
      - build_and_push_deploy_image:
          <<: *deploy_image_common
          base: zec-2.0.4
